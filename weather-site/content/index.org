#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil expand-links:t f:t
#+options: inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Proyecto ICCD332 Arquitectura de Computadores
#+date: 2024-08-07
#+author: Alexis Vasco
#+email: lenin.falconi@epn.edu.ec
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.7.5)
#+cite_export:
* City Weather APP
Este es el proyecto de fin de semestre en donde se pretende demostrar
las destrezas obtenidas durante el transcurso de la asignatura de
**Arquitectura de Computadores**.

1. Conocimientos de sistema operativo Linux
2. Conocimientos de Emacs/Jupyter
3. Configuración de Entorno para Data Science con Mamba/Anaconda
4. Literate Programming
 
** Estructura del proyecto
#+begin_src shell :results output :exports both
mkdir CityWeather
cd CityWeather
pwd
#+end_src

#+RESULTS:
: /home/alex/CityWeather

#+begin_src shell :results output :exports results
cd /home/alex
mkdir -p CityWeather/weather-site
cd CityWeather
pwd
#+end_src

#+RESULTS:
: /home/alex/CityWeather/weather-site

#+begin_src shell :results output :exports both
cd /home/alex
mkdir -p CityWeather/weather-site/content
cd CityWeather
#+end_src
#+RESULTS:
: /home/alex/CityWeather/weather-site/content

#+begin_src shell :results output :exports both
cd /home/alex
mkdir -p CityWeather/weather-site/public
cd CityWeather
#+end_src
#+RESULTS:
: /home/alex/CityWeather/weather-site/public

#+begin_src shell :results output :exports both
cd /home/alex
mkdir -p CityWeather/weather-site/content/images
cd CityWeather
#+end_src
#+RESULTS:
: /home/alex/CityWeather/weather-site/content/images

#+begin_src shell :results output :exports both
cd /home/alex
mkdir -p CityWeather/weather-site/public/images
cd CityWeather
#+end_src
#+RESULTS:
: /home/alex/CityWeather/weather-site/public/images

** Descripción delcódigo

*** Código Python 

** 1. Configuración de Constantes

#+begin_src python

Coordenadas de Madrid
MADRID_LAT = 40.4168 # Latitud de Madrid
MADRID_LONGITUDE = -3.7038 # Longitud de Madrid
API_KEY = "5aaff267349d2a7221192614fe66c853" # Reemplaza por tu API Key de OpenWeatherMap
FILE_NAME = "/home/alex/Arquitectura/CityWeather/clima-madrid-hoy.csv"
#+end_src

Define las constantes necesarias para la solicitud a la API, incluyendo las coordenadas de la ciudad, la clave API y el nombre del archivo CSV donde se guardarán los datos.

** 2. Función get_weather

#+begin_src python
def get_weather(lat, lon, api):
url = f"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api}&units=metric"
response = requests.get(url)
if response.status_code == 200:
return response.json()
else:
return {"cod": response.status_code}
#+end_src

Construye la URL para la solicitud a la API y realiza una solicitud GET. Devuelve la respuesta en formato JSON si la solicitud es exitosa, o un diccionario con el código de error si la solicitud falla.

** 3. Función process

#+begin_src python
def process(json):
normalized_dict = {
"Fecha": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
"Temperatura": json["main"]["temp"],
"Humedad": json["main"]["humidity"],
"Presión": json["main"]["pressure"],
"Velocidad del viento": json["wind"]["speed"],
"dt": json.get("dt", "N/A"),
"coord_lon": json["coord"].get("lon", "N/A"),
"coord_lat": json["coord"].get("lat", "N/A"),
"weather_0_id": json["weather"][0].get("id", "N/A"),
"weather_0_main": json["weather"][0].get("main", "N/A"),
"weather_0_description": json["weather"][0].get("description", "N/A"),
"weather_0_icon": json["weather"][0].get("icon", "N/A"),
"base": json.get("base", "N/A"),
"main_temp": json["main"].get("temp", "N/A"),
"main_feels_like": json["main"].get("feels_like", "N/A"),
"visibility": json.get("visibility", "N/A"),
"wind_speed": json["wind"].get("speed", "N/A"),
"wind_deg": json["wind"].get("deg", "N/A"),
"clouds_all": json.get("clouds", {}).get("all", "N/A"),
"sys_type": json.get("sys", {}).get("type", "N/A"),
"sys_id": json.get("sys", {}).get("id", "N/A"),
"sys_country": json.get("sys", {}).get("country", "N/A"),
"sys_sunrise": json.get("sys", {}).get("sunrise", "N/A"),
"sys_sunset": json.get("sys", {}).get("sunset", "N/A"),
"timezone": json.get("timezone", "N/A"),
"id": json.get("id", "N/A"),
"name": json.get("name", "N/A"),
"cod": json.get("cod", "N/A"),
}
return normalized_dict
#+end_src

Normaliza los datos JSON obtenidos de la API en un diccionario con campos estándar para ser guardados en el archivo CSV. Incluye la fecha y hora actuales y maneja posibles valores ausentes.

** 4. Función write2csv

#+begin_src python
def write2csv(json_response, csv_filename):
fieldnames = [
"Fecha", "Temperatura", "Humedad", "Presión", "Velocidad del viento",
"dt", "coord_lon", "coord_lat", "weather_0_id", "weather_0_main",
"weather_0_description", "weather_0_icon", "base", "main_temp",
"main_feels_like", "visibility", "wind_speed", "wind_deg",
"clouds_all", "sys_type", "sys_id", "sys_country", "sys_sunrise",
"sys_sunset", "timezone", "id", "name", "cod"
]
#+end_src
** 5. Función main
#+begin_src python
def main():
    print("===== Bienvenido a Madrid-Clima =====")
    madrid_weather = get_weather(lat=MADRID_LAT, lon=MADRID_LONGITUDE, api=API_KEY)
    
    if madrid_weather['cod'] != 404:
        processed_weather = process(madrid_weather)
        write2csv(processed_weather, FILE_NAME)
        print("Datos climatológicos guardados correctamente en", FILE_NAME)
    else:
        print("Ciudad no disponible o API KEY no válida")

if __name__ == '__main__':
    main()
#+end_src
Es el punto de entrada del script. Imprime un mensaje de bienvenida, obtiene los datos meteorológicos, los procesa y los guarda en el archivo CSV. Maneja errores en caso de que la ciudad no esté disponible o la clave de API sea inválida.
** Script ejecutable sh

#+begin_src shell :results output :exports both
which sh
#+end_src

#+RESULTS:
: /usr/bin/sh

#+begin_src shell :results output :exports both
which mamba
#+end_src

#+RESULTS:
: /home/alex/miniforge3/condabin/mamba

#+begin_src shell :results output :exports both
#!/usr/bin/sh
source /home/alex/miniforge3/etc/profile.d/conda.sh
eval "$(conda shell.bash hook)"
conda activate iccd332
#+end_src

#+begin_src shell :results output :exports both
#!/usr/bin/sh
chmod +x get-weather.sh
#+end_src

#+RESULTS:

** Configuración de Crontab
Se indica la configuración realizada en crontab para la adquisición de datos

#+begin_src shell
*/15 * * * * /home/alex/Arquitectura/CityWeather/get-weather.sh >> /home/alex/Arquitectura/CityWeather/output.log 2>&1
#+end_src

- Recuerde remplazar <City> por el nombre de la ciudad que analice
- Recuerde ajustar el tiempo para potenciar tomar datos nuevos
- Recuerde que ~2>&1~ permite guardar en ~output.log~ tanto la salida
  del programa como los errores en la ejecución.
* Presentación de resultados
Para la pressentación de resultados se utilizan las librerías de Python:
- matplotlib
- pandas

Alternativamente como pudo estudiar en el Jupyter Notebook
[[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-A/Proyectos/CityWeather/CityTemperatureAnalysis.ipynb][CityTemperatureAnalysis.ipynb]], existen librerías alternativas que se
pueden utilizar para presentar los resultados gráficos. En ambos
casos, para que funcione los siguientes bloques de código, es
necesario que realice la instalación de los paquetes usando ~mamba
install <nombre-paquete>~
** Muestra Aleatoria de datos
Presentar una muestra de 10 valores aleatorios de los datos obtenidos.
#+caption: Lectura de archivo csv
#+begin_src python :session :results output exports both
import os
import pandas as pd
# lectura del archivo csv obtenido
df = pd.read_csv('/home/alex/Arquitectura/CityWeather/clima-madrid-hoy.csv')
# se imprime la estructura del dataframe en forma de filas x columnas
print(df.shape)
#+end_src

#+RESULTS:
: (40, 28)


Resultado del número de filas y columnas leídos del archivo csv
#+RESULTS:
: (40, 28)

#+caption: Despliegue de datos aleatorios
#+begin_src python :session :exports both :results value table :return table
# Asegúrate de que df esté definido en la sesión
table1 = df.sample(10)  # Selecciona 10 filas aleatorias
# Preparar la tabla para mostrar
table = [list(table1.columns)] + table1.reset_index(drop=True).values.tolist()
table
#+end_src

#+RESULTS:
| Fecha               | Temperatura | Humedad | Presión | Velocidad del viento |         dt | coord_lon | coord_lat | weather_0_id | weather_0_main | weather_0_description | weather_0_icon | base     | main_temp | main_feels_like | visibility | wind_speed | wind_deg | clouds_all | sys_type |  sys_id | sys_country | sys_sunrise | sys_sunset | timezone |      id | name   | cod |
| 2024-08-12 21:06:01 |       25.41 |      42 |    1010 |                 3.13 | 1723514343 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     25.41 |            25.1 |      10000 |       3.13 |      342 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 3117735 | Madrid | 200 |
| 2024-08-12 20:49:01 |       25.41 |      42 |    1010 |                 3.58 | 1723513558 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     25.41 |            25.1 |      10000 |       3.58 |       58 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 3117735 | Madrid | 200 |
| 2024-08-12 20:58:01 |       25.41 |      42 |    1010 |                 3.13 | 1723514033 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     25.41 |            25.1 |      10000 |       3.13 |      342 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 3117735 | Madrid | 200 |
| 2024-08-12 21:05:02 |       25.41 |      42 |    1010 |                 3.13 | 1723514343 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     25.41 |            25.1 |      10000 |       3.13 |      342 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 3117735 | Madrid | 200 |
| 2024-08-12 20:50:02 |       25.41 |      42 |    1010 |                 3.58 | 1723513558 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     25.41 |            25.1 |      10000 |       3.58 |       58 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 3117735 | Madrid | 200 |
| 2024-08-12 20:45:02 |       25.45 |      41 |    1010 |                 4.12 | 1723513143 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     25.45 |           25.12 |      10000 |       4.12 |       30 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 6545083 | Sol    | 200 |
| 2024-08-12 20:46:02 |       25.45 |      41 |    1010 |                 4.12 | 1723513143 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     25.45 |           25.12 |      10000 |       4.12 |       30 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 6545083 | Sol    | 200 |
| 2024-08-12 21:02:02 |       25.41 |      42 |    1010 |                 3.13 | 1723514033 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     25.41 |            25.1 |      10000 |       3.13 |      342 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 3117735 | Madrid | 200 |
| 2024-08-12 21:22:02 |       24.68 |      44 |    1010 |                 2.57 | 1723515662 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     24.68 |           24.35 |      10000 |       2.57 |       30 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 3117735 | Madrid | 200 |
| 2024-08-12 21:00:03 |       25.41 |      42 |    1010 |                 3.13 | 1723514343 |   -3.7038 |   40.4168 |          800 | Clear          | clear sky             | 01n            | stations |     25.41 |            25.1 |      10000 |       3.13 |      342 |          0 |        2 | 2007545 | ES          |  1723526645 | 1723576522 |     7200 | 3117735 | Madrid | 200 |

** Gráfica Temperatura vs Tiempo
Realizar una gráfica de la Temperatura en el tiempo.


El siguiente cógido permite hacer la gráfica de la temperatura vs
tiempo para Org 9.7+. Para saber que versión dispone puede ejecutar
~M-x org-version~

#+begin_src python :results file :exports both :session
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# Define el tamaño de la figura de salida
fig = plt.figure(figsize=(8,6))
plt.plot(df['dt'], df['main_temp']) # dibuja las variables dt y temperatura
# ajuste para presentacion de fechas en la imagen 
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=2))
# plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  
plt.grid()
# Titulo que obtiene el nombre de la ciudad del DataFrame
plt.title(f'Main Temp vs Time in {next(iter(set(df.name)))}')
plt.xticks(rotation=40) # rotación de las etiquetas 40°
fig.tight_layout()
fname = '/home/alex/Arquitectura/CityWeather/weather-site/content/images/temperature.png'
plt.savefig(fname)
fname
#+end_src

#+RESULTS:
[[file:/home/alex/Arquitectura/CityWeather/weather-site/content/images/temperature.png]]

#+caption: Gráfica Temperatura vs Tiempo
#+RESULTS:

Debido a que el archivo index.org se abre dentro de la carpeta
/content/, y en cambio el servidor http de emacs se ejecuta desde la
carpeta /public/ es necesario copiar el archivo a la ubicación
equivalente en ~/public/images~

#+begin_src shell
cp -rfv ./images/* /home/alex/Arquitectura/CityWeather/weather-site/public/images
#+end_src

#+RESULTS:
: './images/temperature.pdf' -> '/home/alex/Arquitectura/CityWeather/weather-site/public/images/temperature.pdf'

**  Realice una gráfica de Humedad con respecto al tiempo
#+CAPTION: Gráfico de humedad vs tiempo
#+NAME: fig_humedad_tiempo
[[fnile:/home/alex/Arquitectura/CityWeather/weather-site/public/images/humedadvstiempo.png]]
* Referencias
- [[https://emacs.stackexchange.com/questions/28715/get-pandas-data-frame-as-a-table-in-org-babel][presentar dataframe como tabla en emacs org]]
- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][Python Source Code Blocks in Org Mode]]
- [[https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/][Systems Crafters Construir tu sitio web con Modo Emacs Org]]
- [[https://www.youtube.com/watch?v=AfkrzFodoNw][Vídeo Youtube Build Your Website with Org Mode]]

[fn:1] Recuerde que su máquina ha de disponer de un entorno de
anaconda/mamba denominado iccd332 en el cual se dispone del interprete
de Python

`
